openapi: 3.0.0
info:
  title: authentication
  version: 1.0.0
paths:
  /auth/register:
    post:
      summary: Register a new user
      description: Creates a new user account with the provided registration details.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - login
                - password
              properties:
                name:
                  type: string
                  example: John Doe
                login:
                  type: string
                  example: johndoe
                password:
                  type: string
                  format: password
                  example: StrongP@ssw0rd
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User registered successfully.
        '400':
          description: Invalid input or user already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Login already in use.
  /auth/login:
    post:
      summary: Authenticate a user
      description: Logs in an existing user and returns an authentication token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - login
                - password
              properties:
                login:
                  type: string
                  example: johndoe
                password:
                  type: string
                  format: password
                  example: StrongP@ssw0rd
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '400':
          description: Login failed (validation, wrong credentials, or too many attempts)
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    examples:
                      missingFields:
                        summary: Missing fields
                        value: Please fill all the fields!
                      wrongCredentials:
                        summary: Invalid credentials
                        value: Wrong credentials!
                      tooManyAttempts:
                        summary: Too many failed attempts
                        value: You can try again after 2 minutes
  /profile:
    get:
      summary: Get the authenticated user's profile
      description: Returns the profile details of the currently authenticated user.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  name:
                    type: string
                    example: John Doe
                  login:
                    type: string
                    example: johndoe
                  createdAt:
                    type: string
                    format: date-time
                    example: 2025-08-13T12:34:56Z
        '401':
          description: Unauthorized - Token missing or invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Unauthorized
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
